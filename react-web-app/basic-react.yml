---
apiVersion: image.openshift.io/v1
kind: ImageStream
metadata:
  name: "${{ values.name }}"
  labels:
    app: "${{ values.name }}"
spec: {}
---
apiVersion: build.openshift.io/v1
kind: BuildConfig
metadata:
  name: "${{ values.name }}"
  labels:
    app: "${{ values.name }}"
spec:
  output:
    to:
      kind: ImageStreamTag
      name: "${{ values.name }}:latest"
  postCommit: {}
  resources: {}
  source:
    git:
      uri: "${{ values.source_repository }}"
      ref: "master"
    type: Git
  strategy:
    type: Source
    sourceStrategy:
      from:
        kind: ImageStreamTag
        namespace: openshift
        name: nodejs:16-ubi8
  triggers:
    - github:
        secret: "bWVobWVobWVo"
      type: GitHub
    - type: ConfigChange
    - imageChange: {}
      type: ImageChange
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    image.openshift.io/triggers: '[{"from":{"kind":"ImageStreamTag","name":"${{ values.name }}:latest"},"fieldPath":"spec.template.spec.containers[?(@.name==\"${{ values.name }}\")].image"}]'
    openshift.io/generated-by: OpenShiftNewApp
  creationTimestamp: null
  labels:
    app: "${{ values.name }}"
    app.kubernetes.io/component: "${{ values.name }}"
    app.kubernetes.io/instance: "${{ values.name }}"
  name: "${{ values.name }}"
spec:
  replicas: 1
  selector:
    matchLabels:
      deployment: "${{ values.name }}"
  strategy: {}
  template:
    metadata:
      annotations:
        openshift.io/generated-by: OpenShiftNewApp
      creationTimestamp: null
      labels:
        deployment: "${{ values.name }}"
    spec:
      containers:
        - image: " "
          name: "${{ values.name }}"
          resources: {}
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: "${{ values.name }}"
  name: "${{ values.name }}"
spec:
  ports:
    - name: http
      port: 8080
      targetPort: 3000
  selector:
    app: "${{ values.name }}"
---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  labels:
    app: "${{ values.name }}"
  name: "${{ values.name }}"
spec:
  port:
    targetPort: 3000
  to:
    kind: Service
    name: "${{ values.name }}"
  tls:
    termination: edge
    insecureEdgeTerminationPolicy: Redirect
